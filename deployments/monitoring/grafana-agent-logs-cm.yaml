#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ def agentConfig():
---
metrics:
  wal_directory: /tmp/grafana-agent-wal
  global:
    scrape_interval: 60s
    external_labels:
      cluster: #@ data.values.cluster.name
  configs:
  - name: integrations
    remote_write:
    - url: #@ data.values.metrics.url
      basic_auth:
        username: #@ data.values.metrics.username
        password: #@ data.values.metrics.password
integrations:
  prometheus_remote_write:
  - url: https://prometheus-prod-10-prod-us-central-0.grafana.net/api/prom/push
    basic_auth:
      username: #@ data.values.metrics.username
      password: #@ data.values.metrics.password

logs:
  configs:
  - name: integrations
    clients:
    - url: #@ data.values.logs.url
      basic_auth:
        username: #@ data.values.logs.username
        password: #@ data.values.logs.password
      external_labels:
        cluster: #@ data.values.cluster.name
    positions:
      filename: /tmp/positions.yaml
    target_config:
      sync_period: 10s
    scrape_configs:
    - job_name: integrations/node_exporter_direct_scrape
      static_configs:
      - targets:
        - localhost
        labels:
          instance: $(hostname)
          __path__: /var/log/*.log
          job: integrations/macos-node
      pipeline_stages:
      - multiline:
          firstline: '^([\w]{3} )?[\w]{3} +[\d]+ [\d]+:[\d]+:[\d]+|[\w]{4}-[\w]{2}-[\w]{2} [\w]{2}:[\w]{2}:[\w]{2}(?:[+-][\w]{2})?'
      - regex:
          expression: '(?P<timestamp>([\w]{3} )?[\w]{3} +[\d]+ [\d]+:[\d]+:[\d]+|[\w]{4}-[\w]{2}-[\w]{2} [\w]{2}:[\w]{2}:[\w]{2}(?:[+-][\w]{2})?) (?P<hostname>\S+) (?P<sender>.+?)\[(?P<pid>\d+)\]:? (?P<message>(?s:.*))$'
      - labels:
          sender:
          hostname:
          pid:
      - match:
          selector: '{sender!="", pid!=""}'
          stages:
            - template:
                source: message
                template: '{{.sender }}[{{.pid}}]: {{ .message }}'
            - labeldrop:
                - pid
            - output:
                source: message
    - job_name: integrations/kubernetes/pod-logs
      kubernetes_sd_configs:
        - role: pod
      pipeline_stages:
        - docker: {}
      relabel_configs:
        - source_labels:
            - __meta_kubernetes_pod_node_name
          target_label: __host__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          replacement: $1
          separator: /
          source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_pod_name
          target_label: job
        - action: replace
          source_labels:
            - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_name
          target_label: pod
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_container_name
          target_label: container
        - replacement: /var/log/pods/*$1/*.log
          separator: /
          source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
          target_label: __path__
#@ end
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent-logs
  nanespace: monitoring
data:
  agent.yaml: #@ yaml.encode(agentConfig())
